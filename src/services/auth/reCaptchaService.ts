import logger from '@/utils/logger';

const API_BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL;

/**
 * Validate reCAPTCHA token with backend
 * @param recaptchaToken - The token generated by reCAPTCHA client
 * @param recaptchaAction - The action name (e.g., 'login', 'register')
 * @returns Response with message and risk score
 */
export async function validateRecaptcha(
    recaptchaToken: string,
    recaptchaAction: string
): Promise<{ message: string; score: number }> {
    try {
        logger.debug('Validating reCAPTCHA with action:', recaptchaAction);

        const startTime = Date.now();

        const response = await fetch(`${API_BASE_URL}/auth/validate-reCaptcha`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                recaptchaToken,
                recaptchaAction,
            }),
        });

        const endTime = Date.now();
        logger.debug(`reCAPTCHA API response time: ${endTime - startTime}ms`);

        if (!response.ok) {
            const errorData = await response.json();
            logger.error('reCAPTCHA validation failed:', errorData);
            throw new Error(errorData.error || 'Failed to validate reCAPTCHA');
        }

        const result = await response.json();
        logger.debug('reCAPTCHA validation successful. Score:', result.score);

        return result;
    } catch (error) {
        if (error instanceof Error) {
            logger.error('Error during reCAPTCHA validation:', error.message);
        } else {
            logger.error('Unexpected error during reCAPTCHA validation:', error);
        }
        throw error;
    }
}

/**
 * Check if reCAPTCHA is enabled
 */
export function isRecaptchaEnabled(): boolean {
    return !!process.env.NEXT_PUBLIC_RECAPTCHA_SITE_KEY;
}

/**
 * Get reCAPTCHA site key
 */
export function getRecaptchaSiteKey(): string {
    const siteKey = process.env.NEXT_PUBLIC_RECAPTCHA_SITE_KEY;

    if (!siteKey) {
        throw new Error('reCAPTCHA site key not configured');
    }

    return siteKey;
}

/**
 * Load reCAPTCHA script dynamically
 */
export async function loadRecaptchaScript(): Promise<void> {
    return new Promise((resolve, reject) => {
        // Check if already loaded
        if (typeof window !== 'undefined' && window.grecaptcha) {
            resolve();
            return;
        }

        const siteKey = getRecaptchaSiteKey();

        const script = document.createElement('script');
        script.src = `https://www.google.com/recaptcha/api.js?render=${siteKey}`;
        script.async = true;
        script.defer = true;

        script.onload = () => {
            logger.debug('reCAPTCHA script loaded successfully');
            resolve();
        };

        script.onerror = () => {
            logger.error('Failed to load reCAPTCHA script');
            reject(new Error('Failed to load reCAPTCHA script'));
        };

        document.head.appendChild(script);
    });
}

/**
 * Execute reCAPTCHA and get token
 */
export async function executeRecaptcha(action: string): Promise<string> {
    try {
        // Ensure reCAPTCHA is loaded
        if (typeof window === 'undefined' || !window.grecaptcha) {
            await loadRecaptchaScript();
        }

        const siteKey = getRecaptchaSiteKey();

        return new Promise((resolve, reject) => {
            window.grecaptcha.ready(() => {
                window.grecaptcha
                    .execute(siteKey, { action })
                    .then((token: string) => {
                        logger.debug('reCAPTCHA token generated for action:', action);
                        resolve(token);
                    })
                    .catch((error: Error) => {
                        logger.error('reCAPTCHA execution failed:', error);
                        reject(error);
                    });
            });
        });
    } catch (error) {
        logger.error('Error executing reCAPTCHA:', error);
        throw error;
    }
}

/**
 * Validate reCAPTCHA score
 * Returns true if score is acceptable (>= threshold)
 */
export function isScoreAcceptable(score: number, threshold = 0.5): boolean {
    return score >= threshold;
}

/**
 * Get risk level based on score
 */
export function getRiskLevel(score: number): 'low' | 'medium' | 'high' {
    if (score >= 0.7) return 'low';
    if (score >= 0.3) return 'medium';
    return 'high';
}

/**
 * Reset reCAPTCHA (if needed)
 */
export function resetRecaptcha(): void {
    if (typeof window !== 'undefined' && window.grecaptcha) {
        try {
            window.grecaptcha.reset();
            logger.debug('reCAPTCHA reset successfully');
        } catch (error) {
            logger.warn('Failed to reset reCAPTCHA:', error);
        }
    }
}

// Type declaration for global grecaptcha
declare global {
    interface Window {
        grecaptcha: {
            ready: (callback: () => void) => void;
            execute: (siteKey: string, options: { action: string }) => Promise<string>;
            reset: () => void;
        };
    }
}