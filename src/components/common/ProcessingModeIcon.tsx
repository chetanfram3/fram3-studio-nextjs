"use client";

import { Tooltip, Box } from "@mui/material";
import { useTheme } from "@mui/material/styles";
import AutoFixHighIcon from "@mui/icons-material/AutoFixHigh";
import SpeedIcon from "@mui/icons-material/Speed";
import GaugeIcon from "@mui/icons-material/Tune";
import BarChartIcon from "@mui/icons-material/BarChart";
import ScienceIcon from "@mui/icons-material/Science";
import { useRouter } from "next/navigation";
import type { SxProps, Theme } from "@mui/material";

// ===========================
// TYPE DEFINITIONS
// ===========================

type ProcessingMode = "quick" | "moderate" | "normal" | "detailed" | "auto";

interface ProcessingModeIconProps {
  mode?: ProcessingMode;
  size?: number;
  color?: string;
  showTooltip?: boolean;
  tooltipProps?: object;
  boxProps?: SxProps<Theme>;
  genScriptId?: string;
}

interface IconData {
  icon: React.ReactElement;
  description: string;
  themeColor: string;
}

// ===========================
// ICON CONFIGURATION
// ===========================

const getIconMap = (
  size: number,
  theme: Theme
): Record<ProcessingMode, IconData> => ({
  quick: {
    icon: <SpeedIcon sx={{ fontSize: size }} />,
    description: "Quick processing mode - Faster results with basic detail",
    themeColor: theme.palette.warning.main,
  },
  moderate: {
    icon: <GaugeIcon sx={{ fontSize: size }} />,
    description: "Moderate processing mode - Balanced speed and quality",
    themeColor: theme.palette.success.main,
  },
  normal: {
    icon: <BarChartIcon sx={{ fontSize: size }} />,
    description:
      "Normal processing mode - Standard quality and processing time",
    themeColor: theme.palette.info.main,
  },
  detailed: {
    icon: <ScienceIcon sx={{ fontSize: size }} />,
    description:
      "Detailed processing mode - Higher quality with more extensive analysis",
    themeColor: theme.palette.secondary.main,
  },
  auto: {
    icon: <AutoFixHighIcon sx={{ fontSize: size }} />,
    description: "Script AutoGenerated",
    themeColor: theme.palette.warning.main,
  },
});

// ===========================
// MAIN COMPONENT
// ===========================

/**
 * Component that displays an icon representing the processing mode
 *
 * @param mode - The processing mode ("quick", "moderate", "normal", "detailed", or "auto")
 * @param size - Size of the icon in pixels
 * @param color - Color of the icon (overrides theme color)
 * @param showTooltip - Whether to show a tooltip on hover
 * @param tooltipProps - Additional props for the Tooltip component
 * @param boxProps - Additional sx props for the container Box
 * @param genScriptId - ID for auto-generated script navigation (optional)
 */
export function ProcessingModeIcon({
  mode = "moderate",
  size = 20,
  color,
  showTooltip = true,
  tooltipProps = {},
  boxProps = {},
  genScriptId,
}: ProcessingModeIconProps) {
  const theme = useTheme();
  const router = useRouter();

  const iconMap = getIconMap(size, theme);
  const iconData = iconMap[mode] || iconMap.moderate;

  const handleClick = () => {
    if (mode === "auto" && genScriptId) {
      router.push(`/dashboard/scripts/generated/${genScriptId}`);
    }
  };

  // Icon container styles using theme
  const iconStyle: SxProps<Theme> = {
    color: color || iconData.themeColor,
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    cursor: mode === "auto" && genScriptId ? "pointer" : "default",
    transition: theme.transitions.create(["opacity", "transform"], {
      duration: theme.transitions.duration.short,
    }),
    ...(mode === "quick" && {
      animation: "pulse 1.5s infinite",
      "@keyframes pulse": {
        "0%": { opacity: 0.7 },
        "50%": { opacity: 1 },
        "100%": { opacity: 0.7 },
      },
    }),
    ...(mode === "auto" &&
      genScriptId && {
        "&:hover": {
          transform: "scale(1.1)",
          opacity: 0.8,
        },
        "&:active": {
          transform: "scale(0.95)",
        },
      }),
    ...boxProps,
  };

  // Render icon with optional tooltip
  const iconElement = (
    <Box sx={iconStyle} onClick={handleClick}>
      {iconData.icon}
    </Box>
  );

  if (!showTooltip) {
    return iconElement;
  }

  return (
    <Tooltip title={iconData.description} arrow {...tooltipProps}>
      {iconElement}
    </Tooltip>
  );
}

export default ProcessingModeIcon;
